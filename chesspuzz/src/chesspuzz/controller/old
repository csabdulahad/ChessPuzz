package app.controller;

import app.App;
import app.ChessPGN;
import app.Game;
import app.database.helper.Pref;
import app.model.MoveTD;
import app.staff.*;
import app.theme.PuzzleWinTheme;
import app.theme.Theme;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.Scene;
import javafx.scene.control.TableView;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;

import java.util.ArrayList;
import java.util.Arrays;

public class PuzzleBoardController implements App.SceneObserver, TableNav.TableMoveSelection {

    private Theme theme;

    @FXML
    HBox rootView;

    @FXML
    Pane board;

    @FXML
    TableView<MoveTD> move_table;

    private TableNav tableNav;

    private Game game;
    private MoveRepo moveRepo;

    GameSound gameSound;
    ChessBoard chessBoard;

    @FXML
    StackPane previous, next;


    ArrayList<String> puzzle;
    ArrayList<String> solution;

    @FXML
    public void initialize() {
        App.getApp().observeScene(this);

        tableNav = new TableNav(move_table);
        tableNav.setTableMoveSelection(this);

        puzzle = new ArrayList<>();
        solution = new ArrayList<>();

        gameSound = GameObject.getGameSound();

        chessBoard = new ChessBoard(720d);
        chessBoard.start();
        board.getChildren().add(chessBoard);


        game = Game.setup(chessBoard);


        loadNextPuzzle();
    }

    @Override
    public void onSceneAvailable(Scene scene) {
        // remove initial focus from the chord box to be able to show the hint
        Platform.runLater(() -> rootView.requestFocus());
        scene.setOnKeyPressed(event -> {
            // System.out.println(event.getCode() + " code");
            KeyCode code = event.getCode();
            if (code == KeyCode.RIGHT) {
                nextMove();
            } else if (code == KeyCode.LEFT) {
                previousMove();
            }
        });

        theme = new PuzzleWinTheme(scene);
        theme.applyTheme();
    }

    @Override
    public void reloadTheme() {
        theme.reloadTheme();
    }

    public void change() {
        String current = Pref.getString(App.Key.THEME, Theme.BLACK_MOON);
        String putting = current.equals(Theme.BLACK_MOON) ? Theme.HAVEL_LIGHT : Theme.BLACK_MOON;
        Pref.putString(App.Key.THEME, putting);
        theme.reloadTheme();
    }

    public void skip() {
        loadNextPuzzle();
    }


    private void highlightMove() {
        int rowIndex = moveRepo.currentIndex() / 2;
        tableNav.highlightMove(rowIndex, moveRepo.whoseTurn());
    }

    public void previousMove() {
        if (game.takeBack() && moveRepo.currentIndex() != -1) highlightMove();
        else tableNav.clearSelection();
    }

    public void nextMove() {
        if (game.nexMove()) highlightMove();
    }


    private void loadNextPuzzle() {
        puzzle.clear();
        solution.clear();

        ChessPGN.currentPuzzleIndex++;
        Pref.putInt(App.Key.CURRENT_PUZZLE_INDEX, ChessPGN.currentPuzzleIndex);

        String[] pgn = ChessPGN.getPuzzleAt(ChessPGN.currentPuzzleIndex);
        if (pgn == null || pgn.length < 1) return;


        puzzle.addAll(Arrays.asList(pgn[0].split(",")));
        solution.addAll(Arrays.asList(pgn[1].split(",")));

        moveRepo = MoveRepo.guardedRepo(pgn[0].split(","));

        game.load(moveRepo);
        game.toEnd();

        // load the table data
        ArrayList<MoveTD> moveList = new ArrayList<>();
        for (int i = 0; i < puzzle.size(); i += 2) {

            int index = (i / 2) + 1;

            String moveA = puzzle.get(i);
            String moveB = "";

            if (i + 1 < puzzle.size()) {
                moveB = puzzle.get(i + 1);
            }

            MoveTD moveTD = new MoveTD(index, moveA, moveB);
            moveList.add(moveTD);
        }
        tableNav.setMoveList(moveList);
        tableNav.highlightMove(moveList.size() - 1, moveRepo.whoseTurn());
    }

    @Override
    public void onMoveSelected(int moveIndex) {
        game.goAt(moveIndex);
    }

    public void showSolution() {

        if (solution.size() < 1) return;

        setToTableList(puzzle, solution);

        for (String move : solution) {
            moveRepo.add(move, true);
        }

        solution.clear();;
        nextMove();
    }

    private void setToTableList(ArrayList<String> puzzle, ArrayList<String> solution) {
        ArrayList<MoveTD> moveList = new ArrayList<>();

        boolean oddPuzzle = puzzle.size() % 2 != 0;

        // add normal part
        int rowIndex = 0;
        for (int i = 0; i < puzzle.size(); i += 2) {
            rowIndex = (i / 2) + 1;

            String moveA = puzzle.get(i);
            String moveB = "";

            if (i + 1 < puzzle.size()) moveB = puzzle.get(i + 1);

            MoveTD moveTD = new MoveTD(rowIndex, moveA, moveB);
            moveList.add(moveTD);
        }

        if (oddPuzzle) {
            String moveA = puzzle.get(puzzle.size() - 1);
            String moveB = solution.remove(0);

            MoveTD moveTD = new MoveTD(rowIndex, moveA, moveB);
            moveTD.highlightB = true;
            moveList.add(moveTD);
        }


        for (int i = 0; i < solution.size(); i += 2) {
            rowIndex++;


            String moveA = solution.get(i);

            String moveB = "";
            if (i + 1 < solution.size()) moveB = solution.get(i + 1);

            MoveTD moveTD = new MoveTD(rowIndex, moveA, moveB);

            if (oddPuzzle && !moveB.isEmpty()) moveTD.highlightB = true;
            else moveTD.highlightA = true;

            moveList.add(moveTD);
        }

        tableNav.setMoveList(moveList);
    }

}




<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.Cursor?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.Pane?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>

<HBox id="win_bg" fx:id="rootView" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" spacing="10.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="app.controller.PuzzleBoardController">
    <padding>
        <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
    </padding>
    <VBox spacing="10.0">
        <Pane fx:id="board" prefHeight="720.0" prefWidth="720.0" style="-fx-background-color: gray;" />
        <HBox id="action_button_bg" alignment="CENTER" prefHeight="45.0" styleClass="div">
            <StackPane styleClass="action" HBox.hgrow="ALWAYS">
                <cursor>
                    <Cursor fx:constant="HAND" />
                </cursor>
                <ImageView id="action_star" fitHeight="48.0" fitWidth="48.0" pickOnBounds="true" preserveRatio="true" />
            </StackPane>
            <StackPane styleClass="action" HBox.hgrow="ALWAYS">
                <cursor>
                    <Cursor fx:constant="HAND" />
                </cursor>
                <ImageView id="action_download" fitHeight="48.0" fitWidth="48.0" pickOnBounds="true" preserveRatio="true" />
            </StackPane>
            <StackPane styleClass="action" HBox.hgrow="ALWAYS">
                <cursor>
                    <Cursor fx:constant="HAND" />
                </cursor>
                <ImageView id="action_screenshot" fitHeight="48.0" fitWidth="48.0" pickOnBounds="true" preserveRatio="true" />
            </StackPane>
            <StackPane styleClass="action" HBox.hgrow="ALWAYS">
                <cursor>
                    <Cursor fx:constant="HAND" />
                </cursor>
                <ImageView id="action_info" fitHeight="48.0" fitWidth="48.0" pickOnBounds="true" preserveRatio="true" />
            </StackPane>
            <StackPane styleClass="action" HBox.hgrow="ALWAYS">
                <cursor>
                    <Cursor fx:constant="HAND" />
                </cursor>
                <ImageView id="action_solution" fitHeight="48.0" fitWidth="48.0" onMouseClicked="#showSolution" pickOnBounds="true" preserveRatio="true" />
            </StackPane>
            <StackPane onMouseClicked="#skip" styleClass="action" HBox.hgrow="ALWAYS">
                <cursor>
                    <Cursor fx:constant="HAND" />
                </cursor>
                <ImageView id="action_skip" fitHeight="48.0" fitWidth="48.0" pickOnBounds="true" preserveRatio="true" />
            </StackPane>
            <StackPane fx:id="previous" onMouseClicked="#previousMove" styleClass="action" HBox.hgrow="ALWAYS">
                <cursor>
                    <Cursor fx:constant="HAND" />
                </cursor>
                <ImageView id="action_previous" fitHeight="48.0" fitWidth="48.0" pickOnBounds="true" preserveRatio="true" />
            </StackPane>
            <StackPane fx:id="next" onMouseClicked="#nextMove" styleClass="action" HBox.hgrow="ALWAYS">
                <cursor>
                    <Cursor fx:constant="HAND" />
                </cursor>
                <ImageView id="action_next" fitHeight="48.0" fitWidth="48.0" nodeOrientation="INHERIT" pickOnBounds="true" preserveRatio="true" />
            </StackPane>
        </HBox>
    </VBox>
    <VBox spacing="10.0">
        <HBox alignment="CENTER_LEFT" fillHeight="false" styleClass="div" VBox.vgrow="NEVER">
            <VBox.margin>
                <Insets />
            </VBox.margin>
            <padding>
                <Insets bottom="8.0" left="8.0" right="8.0" top="8.0" />
            </padding>
            <ImageView id="icon_clock" fitHeight="32.0" fitWidth="32.0" pickOnBounds="true" preserveRatio="true" />
            <AnchorPane HBox.hgrow="ALWAYS">
                <Label id="clock" alignment="CENTER" contentDisplay="CENTER" text="03:12" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                    <font>
                        <Font size="24.0" />
                    </font>
                </Label>
            </AnchorPane>
        </HBox>
        <HBox styleClass="div">
            <padding>
                <Insets bottom="8.0" left="8.0" right="8.0" top="8.0" />
            </padding>
            <StackPane>
                <ImageView id="icon_rank" fitHeight="32.0" fitWidth="32.0" pickOnBounds="true" preserveRatio="true" />
                <HBox.margin>
                    <Insets right="8.0" />
                </HBox.margin>
            </StackPane>
            <VBox alignment="CENTER_LEFT" HBox.hgrow="ALWAYS">
                <Label styleClass="text_dim" text="2,232 PST" textFill="WHITE">
                    <font>
                        <Font size="15.0" />
                    </font>
                </Label>
                <Label styleClass="text_dim" text="(+34)" textFill="WHITE">
                    <font>
                        <Font size="15.0" />
                    </font>
                    <VBox.margin>
                        <Insets top="3.0" />
                    </VBox.margin>
                </Label>
            </VBox>
        </HBox>
        <StackPane prefHeight="80.0" prefWidth="215.0" styleClass="div" />
      <AnchorPane styleClass="div" VBox.vgrow="ALWAYS">
         <children>
            <TableView fx:id="move_table" fixedCellSize="0.0" styleClass="noheader" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
              <columns>
                <TableColumn fx:id="move_index" editable="false" minWidth="-Infinity" prefWidth="20.0" sortable="false" styleClass="no_selection" />
                <TableColumn fx:id="white_move" editable="false" prefWidth="75.0" sortable="false" />
                  <TableColumn fx:id="black_move" editable="false" prefWidth="75.0" sortable="false" />
              </columns>
               <columnResizePolicy>
                  <TableView fx:constant="CONSTRAINED_RESIZE_POLICY" />
               </columnResizePolicy>
            </TableView>
         </children>
      </AnchorPane>
        <HBox id="action_button_bg" alignment="CENTER" prefHeight="45.0" styleClass="div">
            <StackPane styleClass="action" HBox.hgrow="ALWAYS">
                <cursor>
                    <Cursor fx:constant="HAND" />
                </cursor>
                <ImageView id="action_sound" fitHeight="48.0" fitWidth="48.0" pickOnBounds="true" preserveRatio="true" />
            </StackPane>
            <StackPane styleClass="action" HBox.hgrow="ALWAYS">
                <cursor>
                    <Cursor fx:constant="HAND" />
                </cursor>
                <ImageView id="action_theme" fitHeight="48.0" fitWidth="48.0" pickOnBounds="true" preserveRatio="true" />
            </StackPane>
            <StackPane styleClass="action" HBox.hgrow="ALWAYS">
                <cursor>
                    <Cursor fx:constant="HAND" />
                </cursor>
                <ImageView id="action_black_white" fitHeight="48.0" fitWidth="48.0" onMouseClicked="#change" pickOnBounds="true" preserveRatio="true" />
            </StackPane>
        </HBox>
    </VBox>
</HBox>
